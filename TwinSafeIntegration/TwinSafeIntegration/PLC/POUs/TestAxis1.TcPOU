<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TestAxis1" Id="{f96370a9-4f66-0068-15bc-b276665895a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestAxis1
VAR
	
//	Axis1 : AXIS_REF;
//	StateAxis1: MoveState_t;
//	PowerAxis1: MC_Power;
//	Move_Y_MC_Axis1: MC_MoveAbsolute;
//	Move_X_MC_Axis1: MC_MoveAbsolute;
//	ResetAxis1: MC_Reset;

//	SoEReadAxis1 : FB_SoERead;
//	SoEResetAxis1 : FB_SoEReset;
	
//	MoveAbsoluteOut1: ST_McOutputs;		(* debug function block output data *)
//	PowerAxis1Out: ST_McOutputs;		(* debug function block output data *)
//	MoveAbsoluteOut2: ST_McOutputs;		(* debug function block output data *)
//	ResetOut : ST_McOutputs;			(* debug function block output data *)

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//	(* update the axis status at the beginning of each cycle *)
//		Axis1.ReadStatus();
//		SoEReadAxis1(Axis := Axis1);
//		SoEResetAxis1(Axis := Axis1);
//		PowerAxis1(Axis := Axis1);
//		ResetAxis1(Axis := Axis1);
//		Move_X_MC_Axis1(Axis := Axis1);
//		Move_Y_MC_Axis1(Axis := Axis1);
		

////IF SafetyGlobalVariableList.SAFETY_Permission = FALSE THEN

//// resetSafety();

////END_IF		
		
		
//IF SafetyGlobalVariableList.SAFETY_Permission = TRUE THEN

	
//	(* move axis using a state machine *)
//	CASE StateAxis1 OF

//		MOVESTATE_INIT :	(* initialisation *)
//			(* initialize all function blocks *)
//			Move_X_MC_Axis1.Execute	:= FALSE;
//			Move_Y_MC_Axis1.Execute	:= FALSE;
//			ResetAxis1.Execute		:= FALSE;
//			SoEResetAxis1.Execute 	:= FALSE;
//			StateAxis1				:= MOVESTATE_ENABLE;

//		MOVESTATE_ENABLE :
//			PowerAxis1.Enable := TRUE;
//			PowerAxis1.Enable_Positive := TRUE;
//			PowerAxis1.Enable_Negative := TRUE;
//			IF PowerAxis1.Status THEN
//				StateAxis1 := MOVESTATE_FORWARD;
//			ELSIF PowerAxis1.Error THEN
//				StateAxis1 := MOVESTATE_ERROR;
//			END_IF

//		MOVESTATE_FORWARD :		(* start to first position *)
//			Move_X_MC_Axis1.Position := 1500;		(* start to intermediate tartet position *)
//			Move_X_MC_Axis1.Velocity := 50;		(* medium velocity level *)
//			Move_X_MC_Axis1.BufferMode := MC_Buffered;
//			Move_X_MC_Axis1.Execute := TRUE;
//			IF Move_X_MC_Axis1.Active  THEN
//				(* axis is executing job but is not yet finished *)
//				Move_X_MC_Axis1.Execute := FALSE;
//				(* leave this state and buffer a second command *)
//				StateAxis1 := MOVESTATE_NEWTARGETPOSITION;
//			ELSIF Move_X_MC_Axis1.CommandAborted OR Move_X_MC_Axis1.Error THEN
//				StateAxis1 := MOVESTATE_ERROR;
//			END_IF

//		MOVESTATE_NEWTARGETPOSITION :		(* change target position while moving *)
//			(* start a buffered motion command while axis is moving *)
//			Move_Y_MC_Axis1.Position := 5000;		(* start to final target *)
//			Move_Y_MC_Axis1.Velocity := 50;		(* increase velocity *)
//			Move_Y_MC_Axis1.BufferMode := MC_BlendingPrevious; 	(* use velocity of previous command till intermediate target position position *)
//			Move_Y_MC_Axis1.Execute := TRUE;
//			IF Move_Y_MC_Axis1.Done THEN
//				Move_Y_MC_Axis1.Execute := FALSE;
//				StateAxis1 := MOVESTATE_BACKWARDS;
//			ELSIF Move_Y_MC_Axis1.CommandAborted OR Move_Y_MC_Axis1.Error THEN
//				StateAxis1 := MOVESTATE_ERROR;
//			END_IF

//		MOVESTATE_BACKWARDS :	(* move back to initial position *)
//			Move_X_MC_Axis1.Position := 100;		(* position close to initial position *)
//			Move_X_MC_Axis1.Velocity := 50;		(* high velocity *)
//			Move_X_MC_Axis1.BufferMode := MC_Buffered;
//			Move_X_MC_Axis1.Execute := TRUE;
//			IF Move_X_MC_Axis1.Active THEN
//				(* axis is executing job but is not yet finished *)
//				Move_X_MC_Axis1.Execute := FALSE;
//				(* leave this state and buffer a second command *)
//				StateAxis1 := MOVESTATE_BACKWARDSSLOW;
//			ELSIF Move_X_MC_Axis1.CommandAborted OR Move_X_MC_Axis1.Error THEN
//				StateAxis1 := MOVESTATE_ERROR;
//			END_IF

//		MOVESTATE_BACKWARDSSLOW :	(* move back to initial position *)
//			(* start a buffered motion command while axis is moving *)
//			Move_Y_MC_Axis1.Position := 0;	(* back to initial position *)
//			Move_Y_MC_Axis1.Velocity := 50; 	(* slow velocity *)
//			Move_Y_MC_Axis1.BufferMode := MC_BlendingNext; 	(* use velocity from first target position *)
//			Move_Y_MC_Axis1.Execute := TRUE;
//			IF Move_Y_MC_Axis1.Done THEN
//				Move_Y_MC_Axis1.Execute := FALSE;
//				StateAxis1 := MOVESTATE_FORWARD;
//			ELSIF Move_Y_MC_Axis1.CommandAborted OR Move_Y_MC_Axis1.Error THEN
//				StateAxis1 := MOVESTATE_ERROR;
//			END_IF

//		MOVESTATE_ERROR :
//			IF Axis1.Status.Error OR SoEReadAxis1.Error THEN
//				StateAxis1 := MOVESTATE_RESET;	(* axis error re quires reset *)
//			ELSE 
//				StateAxis1 := MOVESTATE_INIT;		(* function block errors don't need a reset *)
//			END_IF

//		MOVESTATE_RESET :
//			ResetAxis1.Execute := TRUE; 		
//			SoEResetAxis1.Execute := TRUE;
//			IF ResetAxis1.Done THEN
//				StateAxis1 := MOVESTATE_INIT;
//			ELSIF ResetAxis1.Error THEN
//				StateAxis1 := MOVESTATE_INIT; (* can't do anything here *)
//			END_IF

//	END_CASE

//END_IF]]></ST>
    </Implementation>
    <LineIds Name="TestAxis1">
      <LineId Id="1359" Count="112" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>